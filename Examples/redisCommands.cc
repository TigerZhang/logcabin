struct redisCommands {
    const char *name;
    const char *flags;
};

struct redisCommands redisCommandTable[] = {
    {"get","rF"},
    {"set","wm"},
    {"setnx","wmF"},
    {"setex","wm"},
    {"psetex","wm"},
    {"append","wm"},
    {"strlen","rF"},
    {"del","w"},
    {"exists","rF"},
    {"setbit","wm"},
    {"getbit","rF"},
    {"setrange","wm"},
    {"getrange","r"},
    {"substr","r"},
    {"incr","wmF"},
    {"decr","wmF"},
    {"mget","r"},
    {"rpush","wmF"},
    {"lpush","wmF"},
    {"rpushx","wmF"},
    {"lpushx","wmF"},
    {"linsert","wm"},
    {"rpop","wF"},
    {"lpop","wF"},
    {"brpop","ws"},
    {"brpoplpush","wms"},
    {"blpop","ws"},
    {"llen","rF"},
    {"lindex","r"},
    {"lset","wm"},
    {"lrange","r"},
    {"ltrim","w"},
    {"lrem","w"},
    {"rpoplpush","wm"},
    {"sadd","wmF"},
    {"srem","wF"},
    {"smove","wF"},
    {"sismember","rF"},
    {"scard","rF"},
    {"spop","wRsF"},
    {"srandmember","rR"},
    {"sinter","rS"},
    {"sinterstore","wm"},
    {"sunion","rS"},
    {"sunionstore","wm"},
    {"sdiff","rS"},
    {"sdiffstore","wm"},
    {"smembers","rS"},
    {"sscan","rR"},
    {"zadd","wmF"},
    {"zincrby","wmF"},
    {"zrem","wF"},
    {"zremrangebyscore","w"},
    {"zremrangebyrank","w"},
    {"zremrangebylex","w"},
    {"zunionstore","wm"},
    {"zinterstore","wm"},
    {"zrange","r"},
    {"zrangebyscore","r"},
    {"zrevrangebyscore","r"},
    {"zrangebylex","r"},
    {"zrevrangebylex","r"},
    {"zcount","rF"},
    {"zlexcount","rF"},
    {"zrevrange","r"},
    {"zcard","rF"},
    {"zscore","rF"},
    {"zrank","rF"},
    {"zrevrank","rF"},
    {"zscan","rR"},
    {"hset","wmF"},
    {"hsetnx","wmF"},
    {"hget","rF"},
    {"hmset","wm"},
    {"hmget","r"},
    {"hincrby","wmF"},
    {"hincrbyfloat","wmF"},
    {"hdel","wF"},
    {"hlen","rF"},
    {"hkeys","rS"},
    {"hvals","rS"},
    {"hgetall","r"},
    {"hexists","rF"},
    {"hscan","rR"},
    {"incrby","wmF"},
    {"decrby","wmF"},
    {"incrbyfloat","wmF"},
    {"getset","wm"},
    {"mset","wm"},
    {"msetnx","wm"},
    {"randomkey","rR"},
    {"select","rlF"},
    {"move","wF"},
    {"rename","w"},
    {"renamenx","wF"},
    {"expire","wF"},
    {"expireat","wF"},
    {"pexpire","wF"},
    {"pexpireat","wF"},
    {"keys","rS"},
    {"scan","rR"},
    {"dbsize","rF"},
//    {"auth","rsltF"},
    {"ping","rtF"},
//    {"echo","rF"},
//    {"save","ars"},
//    {"bgsave","ar"},
//    {"bgrewriteaof","ar"},
//    {"shutdown","arlt"},
//    {"lastsave","rRF"},
//    {"type","rF"},
//    {"multi","rsF"},
//    {"exec","sM"},
//    {"discard","rsF"},
//    {"sync","ars"},
//    {"psync","ars"},
//    {"replconf","arslt"},
//    {"flushdb","w"},
    {"flushall","w"},
    {"sort","wm"},
    {"info","rlt"},
//    {"monitor","ars"},
    {"ttl","rF"},
    {"pttl","rF"},
//    {"persist","wF"},
//    {"slaveof","ast"},
//    {"role","lst"},
    {"debug","as"},
//    {"config","art"},
//    {"subscribe","rpslt"},
//    {"unsubscribe","rpslt"},
//    {"psubscribe","rpslt"},
//    {"punsubscribe","rpslt"},
//    {"publish","pltrF"},
//    {"pubsub","pltrR"},
//    {"watch","rsF"},
//    {"unwatch","rsF"},
    {"restore","wm"},
//    {"migrate","w"},
//    {"dump","r"},
//    {"object","r"},
//    {"client","rs"},
//    {"eval","s"},
//    {"evalsha","s"},
//    {"slowlog","r"},
//    {"script","rs"},
//    {"time","rRF"},
    {"bitop","wm"},
    {"bitcount","r"},
    {"bitpos","r"},
//    {"command","rlt"},
//    {"pfselftest","r"},
//    {"pfadd","wmF"},
//    {"pfcount","r"},
//    {"pfmerge","wm"},
//    {"pfdebug","w"},
//    {"latency","arslt"},
    {0, 0}
};
